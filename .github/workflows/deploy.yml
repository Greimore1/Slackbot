name: Deploy Slack Chatbot to AWS ECS
on:
  push:
    branches:
      - main
env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: slack-chatbot
  ECS_CLUSTER: slack-chatbot-cluster
  ECS_SERVICE: slack-chatbot-service
  ECS_TASK_DEFINITION: task-definition.json
  CONTAINER_NAME: slack-chatbot
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.7
        terraform_wrapper: false
    
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
    
    - name: Terraform Plan
      run: terraform plan 
        -var="container_image=${{ steps.build-image.outputs.image }}"
        -var="subnet_ids=${{ secrets.TF_VAR_SUBNET_IDS }}"
        -var="security_group_ids=${{ secrets.TF_VAR_SECURITY_GROUP_IDS }}"
      working-directory: ./terraform
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
    
    - name: Terraform Apply
      run: terraform apply -auto-approve 
        -var="container_image=${{ steps.build-image.outputs.image }}"
        -var="subnet_ids=${{ secrets.TF_VAR_SUBNET_IDS }}"
        -var="security_group_ids=${{ secrets.TF_VAR_SECURITY_GROUP_IDS }}"
      working-directory: ./terraform
      env:
        TF_VAR_aws_region: ${{ env.AWS_REGION }}
    
    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --force-new-deployment
